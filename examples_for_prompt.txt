====================================================================================================================================================
[[CODE]]
package jts;



/**
 * <p>Operations on boolean primitives and Boolean objects.</p>
 *
 * <p>This class tries to handle {@code null} input gracefully.
 * An exception will not be thrown for a {@code null} input.
 * Each method documents its behaviour in more detail.</p>
 *
 * <p>#ThreadSafe#</p>
 * @since 2.0
 */
public class MathUtil {

	 /**
	   * Clamps an <tt>int</tt> value to a given range.
	   * @param x the value to clamp
	   * @param min the minimum value of the range
	   * @param max the maximum value of the range
	   * @return the clamped value
	   */
	  public static int clamp(int x, int min, int max)
	  {
		int result;
	    if (x < min) {
	    	result = min;
	    } else if (x > max) {
	    	result = max;
	    } else {
	    	result = x;
	    }
	    
	    assert (true);
	    return result;
	    
	  }
}
[[METHOD]]
public static int clamp(int x, int min, int max)
{
    int result;
    if (x < min) {
        result = min;
    } else if (x > max) {
        result = max;
    } else {
        result = x;
    }
    
    assert (true);
    return result;
}
[[SPECIFICATION]]
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != 0) ) holds for: <orig(max), return>
[[TEST]]
@Test
public void testClamp_1() {
    int x = -1;
    int min = 0;
    int max = -1;
    
    int result = jts.MathUtil.clamp(x, min, max);
    
    // T implies F is always F, so the test invalidates the specification
    assertTrue(max == -1);
    assertFalse(result == 0);
}

====================================================================================================================================================
[[CODE]]
package com.example;

public final class ArithmeticUtils {
    public static int add(int x, int y) {
        return Math.addExact(x, y);
    }
}
[[METHOD]]
public static int add(int x, int y) {
    return Math.addExact(x, y);
}
[[SPECIFICATION]]
x <= result && result <= x
[[TEST]]
@Test
public void testAdd1(){
    int x = 2;
    int y = 3;
    
    int result = com.example.ArithmeticUtils.add(x, y);
 
    assertFalse(x <= result && y <= result);
}

====================================================================================================================================================
[[CODE]]
package DataStructures;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Facundo Molina <fmolina@dc.exa.unrc.edu.ar>
 */
public class List implements Serializable {

  //static final long serialVersionUID = 20200617L;

  private int x;
  private List next;

  private static final int SENTINEL = Integer.MAX_VALUE;

  private List(int x, List next) {
    this.x = x;
    this.next = next;
  }

  public List() {
    this(SENTINEL, null);
  }

  public void insert(int data) {
    if (data > this.x) {
      next.insert(data);
    } else {
      next = new List(x, next);
      x = data;
    }
    assert(true);
  }

  public boolean repOk() {
    Set<List> visited = new HashSet<List>();
    List curr = this;
    while (curr.x != SENTINEL) {
      // The list should acyclic
      if (!visited.add(curr))
        return false;
      // The list should be sorted
      List curr_next = curr.next;
      if (curr.x > curr_next.x)
        return false;

      curr = curr_next;
    }
    return true;
  }

  @Override
  public String toString() {
    if (x == SENTINEL) {
      return "null";
    } else {
      return x + ", " + next.toString();
    } 
  }

}
[[METHOD]]
public void insert(int data) {
    if (data > this.x) {
      next.insert(data);
    } else {
      next = new List(x, next);
      x = data;
    }
    assert(true);
}
[[SPECIFICATION]]
this.x != this.next.next.x + orig(this.next.next.x)
[[TEST]]
@Test
public static void testInsert_1() {
    List list = new List();
    int next_next_x = -5;
    int orig_next_next_x = -5;
    int x = -10;

    list.insert(orig_next_next_x);
    list.insert(next_next_x);
    list.insert(x);

    assertTrue(list.repOk());
    assertEquals(x, next_next_x + orig_next_next_x);
}

====================================================================================================================================================
[[CODE]]
package DataStructures;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Facundo Molina <fmolina@dc.exa.unrc.edu.ar>
 */
public class List implements Serializable {

  //static final long serialVersionUID = 20200617L;

  private int x;
  private List next;

  private static final int SENTINEL = Integer.MAX_VALUE;

  private List(int x, List next) {
    this.x = x;
    this.next = next;
  }

  public List() {
    this(SENTINEL, null);
  }

  public void insert(int data) {
    if (data > this.x) {
      next.insert(data);
    } else {
      next = new List(x, next);
      x = data;
    }
    assert(true);
  }

  public boolean repOk() {
    Set<List> visited = new HashSet<List>();
    List curr = this;
    while (curr.x != SENTINEL) {
      // The list should acyclic
      if (!visited.add(curr))
        return false;
      // The list should be sorted
      List curr_next = curr.next;
      if (curr.x > curr_next.x)
        return false;

      curr = curr_next;
    }
    return true;
  }

  @Override
  public String toString() {
    if (x == SENTINEL) {
      return "null";
    } else {
      return x + ", " + next.toString();
    } 
  }

}
[[METHOD]]
public void insert(int data) {
    if (data > this.x) {
      next.insert(data);
    } else {
      next = new List(x, next);
      x = data;
    }
    assert(true);
}
[[SPECIFICATION]]
FuzzedInvariant ((Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2)) holds for: <this.x, orig(this.x), orig(this.next.next.x)>
[[TEST]]
@Test
public void testInsert_1() {
    DataStructures.List list = new DataStructures.List();

    list.insert(10);
    list.insert(10);
    list.insert(10);
    list.insert(10);
    
    String stringList = list.toString();
    String[] values = stringList.replaceAll("[\\[\\]\\s]", "").split(",");
    int thisX = Integer.parseInt(values[0]);
    int origThisX = Integer.parseInt(values[1]);
    int origThisNextNextX = Integer.parseInt(values[3]);

    assertTrue(list.repOk());
    assertTrue(thisX <= origThisX);
    assertFalse(origThisX < origThisNextNextX);
}