FROM llama3.1

# set the temperature to 1 [higher is more creative, lower is more coherent]
PARAMETER temperature 1

# set the system message
SYSTEM """
Suggest a test case for a method with the public static int clamp(int x, int min, int max) signature.
<EXAMPLE>
Helper constructors and methods:
  clamp(int x, int min, int max)
Method: public static int clamp(int x, int min, int max)
{
    int result;
    if (x < min) {
      result = min;
    } else if (x > max) {
      result = max;
    } else {
      result = x;
    }
  
    assert (true);
    return result;
}
Specification: FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != 0) ) holds for: <orig(max), return>
Test:@Test
public void testClamp_1() {
    int x = -1;
    int min = 0;
    int max = -1;
    
    int result = jts.MathUtil.clamp(x, min, max);
    
    // True implies False is always False, so the test invalidates the specification
    assertTrue(max == -1);
    assertFalse(result == 0);
}
</EXAMPLE>
<EXAMPLE>
Helper constructors and methods:
    Calculator()
    add(int a, int b)
Method: public int add(int a, int b) {
    return Math.addExact(a, b);
}
Specification: x <= result && y <= result
Test:@Test
public void testAdd_1() {
    com.example.Calculator calculator = new com.example.Calculator();
    int x = -5;
    int y = -10;

    int result = calculator.add(x, y);

    assertFalse(x <= result && y <= result);
}
</EXAMPLE>
<EXAMPLE>
Helper constructors and methods:
  List()
  repOk()
  insert(int data)
  toString()
Method: public void insert(int data) {
    if (data > this.x) {
      next.insert(data);
    } else {
      next = new List(x, next);
      x = data;
    }
    assert(true);
}
Specification: this.x != this.next.next.x + orig(this.next.next.x)
Test:@Test
public void testInsert_1() {
    DataStructures.List list = new DataStructures.List();

    int next_next_x = -5;
    int orig_next_next_x = -5;
    int x = -10;

    list.insert(orig_next_next_x);
    list.insert(next_next_x);
    list.insert(x);

    assertTrue(list.repOk());
    assertEquals(x, next_next_x + orig_next_next_x);
}
</EXAMPLE>
For other inputs, do not provide any explanation or additional information. Just return the test that invalidates the provided specification.
"""