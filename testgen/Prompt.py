from enum import Enum


class PromptID(Enum):
    General_V1 = 0
    General_V2 = 1
    # Simple_plus_Answer = 1

    @classmethod
    def all(cls):
        return list(map(lambda c: c, cls))

    @classmethod
    def print_supported_prompts(cls):
        print("List of supported Prompts:")
        for p in cls.all():
            print("{} : {}".format(p.name, p))


class Prompt:
    id: PromptID
    template: str
    prompt: str
    question_format: str
    characteristics_format: str
    format_instructions: str

    gt_question: {}
    selected_traits: list

    def __init__(self, id=PromptID.General_V1, question=None, traits=[]):
        self.id = id
        self.gt_question = question
        if traits is None or len(traits) == 0:
            self.selected_traits = supported_traits['traits'].values
        else:
            self.selected_traits = traits
        self.instantiate_prompt_template()
    # generate prompt templates

    def instantiate_prompt_template(self):
        LIST_OF_CONDITIONS = {}
        for t, d in traits_list.items():
            if t in self.selected_traits:
                LIST_OF_CONDITIONS[t] = d

        if self.id == PromptID.General_V1:
            self.template = '''Given the CHARACTERISTICS below and the QUESTION given by an AI assistant as a response to the CHARACTERISTICS. 
            
            Does the QUESTION comply with the following LIST_OF_CONDITIONS (which are provided in JSON format, with keys \"trait\" and \"condition\")? ")
            
            CHARACTERISTICS: ```{prompt}``` 
            
            QUESTION: ```{questionnaire}```
            
            LIST_OF_CONDITIONS: ```{conditions}``` 
            '''

            self.question_format = "QCM-ALE"
            self.characteristics_format = "GSTCSk"
            self.format_instructions = ""
            # self.format_instructions = '''Reply with a text in valid JSON format, that is: the content is embedded within an open and a closing bracket.
            #
            # Do not include in your answer the term "json". Do not include in your answer any carry return, nor any special character other than brackets and curly brackets.
            #
            # Your answer must include, for each item in the LIST_OF_CONDITIONS:
            #
            # 1. A key "trait" with the trait of the corresponding LIST_OF_CONDITIONS item.
            #
            # 2. A key "valid" only with "True" if the corresponding condition of the LIST_OF_CONDITIONS item is fulfilled by the QUESTION; or "False" otherwise.
            #
            # 3. A key "reasoning", empty if "valid" is "True"; or, only if "valid" is "False", with an explanation of no more than 40 words of why the value in key "valid" is "False", pointing out which concrete questions or answers raise this problem.
            # '''
            QUESTION = build_question(self.gt_question, self.question_format)
            CHARACTERISTICS = build_characteristics(
                self.gt_question, self.characteristics_format)

            self.prompt = self.template.format(
                prompt=CHARACTERISTICS, questionnaire=QUESTION, conditions=LIST_OF_CONDITIONS)
        elif self.id == PromptID.General_V2:
            self.template = '''Below we provide a QUESTION generated by an AI assistant targeting students with the given CHARACTERISTICS. 
            
            Does the QUESTION comply with the following LIST_OF_CONDITIONS (which are provided in JSON format, with keys "trait" and "condition")? 
            
            CHARACTERISTICS: ```{characteristics}``` 
            
            QUESTION : ```{question}``` 
            
            LIST_OF_CONDITIONS: ```{conditions}``` 
            '''

            self.question_format = "QCM-ALE"
            self.characteristics_format = "GSTCSk"
            self.format_instructions = ""
            QUESTION = build_question(self.gt_question, self.question_format)
            CHARACTERISTICS = build_characteristics(
                self.gt_question, self.characteristics_format)

            self.prompt = self.template.format(
                characteristics=CHARACTERISTICS, question=QUESTION, conditions=LIST_OF_CONDITIONS)
