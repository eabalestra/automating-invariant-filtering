import sys
import re
from typing import List

try:
    from scripts.test_extractor import extract_tests_from_file
    from scripts.file_manager import read_file, write_file
except ModuleNotFoundError:
    # Fallback for direct script execution
    from test_extractor import extract_tests_from_file
    from file_manager import read_file, write_file

destination_test_suite = sys.argv[1]
destination_test_driver = sys.argv[2]
source_test_suite = sys.argv[3]
subject_class = sys.argv[4]


def add_generated_tests_to_suite(destination_test_suite, test_suite):
    for test in test_suite:
        add_test_to_file(destination_test_suite, test)


def append_tests_into_driver_file(file_path: str, test_methods: List[str]) -> None:
    content = read_file(file_path, 'r')
    if_block_pattern = r'if\s*\(\s*hadFailure\s*\)\s*\{'
    new_tests = "\n".join([
        f"""
        // Test generated by LLM
        try {{
            t0.{test}();
        }} catch (Throwable e) {{
            hadFailure = true;
            e.printStackTrace();
        }}
        """ for test in test_methods
    ])
    new_content = re.sub(if_block_pattern, new_tests + r'\g<0>', content)
    write_file(file_path, new_content, 'w')


def add_test_to_file(test_file_path: str, new_test: str) -> None:
    try:
        with open(test_file_path, 'r+', encoding='utf-8') as df:
            content = df.read()
            if '}' not in content:
                print("No closing brace '}' found in the existing test file.")
                return
            head, tail = content.rsplit('}', 1)
            new_content = f"{head}\n{new_test}\n}}{tail}"
            df.seek(0)
            df.write(new_content)
            df.truncate()
    except IOError as e:
        print(f'Error processing file {test_file_path}: {e}')


def extract_test_names(test_suite):
    test_name_regex = r'public void (\w+)\(\)'
    compiled_test_names = [
        re.search(test_name_regex, test).group(1)
        for test in test_suite if re.search(test_name_regex, test)
    ]
    return compiled_test_names


def main() -> None:
    if len(sys.argv) < 4:
        print("Usage: python3 test_appender.py <destination_suite>.java <destination_driver>.java <source_suite>.java <subject_class>.java")
        sys.exit(1)

    compiled_tests = extract_tests_from_file(source_test_suite)

    add_generated_tests_to_suite(
        destination_test_suite, compiled_tests)

    compiled_test_names = extract_test_names(compiled_tests)
    append_tests_into_driver_file(destination_test_driver, compiled_test_names)

    print(
        f"Tests appended to {destination_test_suite} and {destination_test_driver}")


if __name__ == "__main__":
    main()
